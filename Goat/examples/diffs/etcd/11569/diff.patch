diff --git a/server/etcdserver/server_test.go b/server/etcdserver/server_test.go
index bb2fd64..1272d5a 100644
--- a/server/etcdserver/server_test.go
+++ b/server/etcdserver/server_test.go
@@ -843,7 +843,7 @@ func TestSync(t *testing.T) {
 	srv.applyV2 = &applierV2store{store: srv.v2store, cluster: srv.cluster}
 
 	// check that sync is non-blocking
-	done := make(chan struct{}, 1)
+	done := make(chan struct{})
 	go func() {
 		srv.sync(10 * time.Second)
 		done <- struct{}{}
@@ -888,7 +888,7 @@ func TestSyncTimeout(t *testing.T) {
 	srv.applyV2 = &applierV2store{store: srv.v2store, cluster: srv.cluster}
 
 	// check that sync is non-blocking
-	done := make(chan struct{}, 1)
+	done := make(chan struct{})
 	go func() {
 		srv.sync(0)
 		done <- struct{}{}
diff --git a/server/mvcc/kvstore_test.go b/server/mvcc/kvstore_test.go
index 6cff76b..6d1d09a 100644
--- a/server/mvcc/kvstore_test.go
+++ b/server/mvcc/kvstore_test.go
@@ -663,7 +663,7 @@ func TestConcurrentReadNotBlockingWrite(t *testing.T) {
 	readTx1 := s.Read(traceutil.TODO())
 
 	// write should not be blocked by reads
-	done := make(chan struct{}, 1)
+	done := make(chan struct{})
 	go func() {
 		s.Put([]byte("foo"), []byte("newBar"), lease.NoLease) // this is a write Txn
 		done <- struct{}{}
diff --git a/server/mvcc/watcher_test.go b/server/mvcc/watcher_test.go
index 37c8b8c..b03ea6c 100644
--- a/server/mvcc/watcher_test.go
+++ b/server/mvcc/watcher_test.go
@@ -355,7 +355,7 @@ func TestWatcherWatchWithFilter(t *testing.T) {
 	}
 
 	w.Watch(0, []byte("foo"), nil, 0, filterPut)
-	done := make(chan struct{}, 1)
+	done := make(chan struct{})
 
 	go func() {
 		<-w.Chan()
diff --git a/tests/integration/clientv3/kv_test.go b/tests/integration/clientv3/kv_test.go
index 8012a1d..d03fe55 100644
--- a/tests/integration/clientv3/kv_test.go
+++ b/tests/integration/clientv3/kv_test.go
@@ -728,7 +728,7 @@ func TestKVGetRetry(t *testing.T) {
 
 	clus.Members[fIdx].Stop(t)
 
-	donec := make(chan struct{}, 1)
+	donec := make(chan struct{})
 	go func() {
 		// Get will fail, but reconnect will trigger
 		gresp, gerr := kv.Get(ctx, "foo")
diff --git a/tests/integration/clientv3/txn_test.go b/tests/integration/clientv3/txn_test.go
index ae19b4f..ae28fd4 100644
--- a/tests/integration/clientv3/txn_test.go
+++ b/tests/integration/clientv3/txn_test.go
@@ -119,7 +119,7 @@ func TestTxnReadRetry(t *testing.T) {
 		clus.Members[0].Stop(t)
 		<-clus.Members[0].StopNotify()
 
-		donec := make(chan struct{}, 1)
+		donec := make(chan struct{})
 		go func() {
 			_, err := kv.Txn(context.TODO()).Then(thenOps[i]...).Commit()
 			if err != nil {
