diff --git a/pkg/sql/copy_in_test.go b/pkg/sql/copy_in_test.go
index 08533d10a0..81a82c7cc6 100644
--- a/pkg/sql/copy_in_test.go
+++ b/pkg/sql/copy_in_test.go
@@ -115,7 +115,6 @@ func TestCopyNullInfNaN(t *testing.T) {
 	if err != nil {
 		t.Fatal(err)
 	}
-	defer rows.Close()
 
 	for row, in := range input {
 		if !rows.Next() {
@@ -244,7 +243,6 @@ func TestCopyRandom(t *testing.T) {
 	if err != nil {
 		t.Fatal(err)
 	}
-	defer rows.Close()
 
 	for row, in := range inputs {
 		if !rows.Next() {
diff --git a/pkg/sql/metric_test.go b/pkg/sql/metric_test.go
index 6c39c8c8e6..c20f0c628d 100644
--- a/pkg/sql/metric_test.go
+++ b/pkg/sql/metric_test.go
@@ -304,10 +304,6 @@ func TestAbortCountErrorDuringTransaction(t *testing.T) {
 		t.Error(err)
 	}
 
-	if err := txn.Rollback(); err != nil {
-		t.Fatal(err)
-	}
-
 	if _, err := checkCounterDelta(s, sql.MetaTxnAbort, accum.txnAbortCount, 1); err != nil {
 		t.Error(err)
 	}
diff --git a/pkg/sql/txn_restart_test.go b/pkg/sql/txn_restart_test.go
index b7574bedeb..b4ec318354 100644
--- a/pkg/sql/txn_restart_test.go
+++ b/pkg/sql/txn_restart_test.go
@@ -887,10 +887,6 @@ CREATE DATABASE t; CREATE TABLE t.test (k INT PRIMARY KEY, v TEXT);
 	if _, err := tx.Exec("INSERT INTO t.test(k, v) VALUES (0, 'sentinel')"); !testutils.IsError(err, "current transaction is committed") {
 		t.Fatalf("unexpected error: %v", err)
 	}
-	// Rollback should respond with a COMMIT command tag.
-	if err := tx.Rollback(); !testutils.IsError(err, "unexpected command tag COMMIT") {
-		t.Fatalf("unexpected error: %v", err)
-	}
 }
 
 // Test that a COMMIT getting an error, retriable or not, leaves the txn
@@ -1037,9 +1033,6 @@ CREATE TABLE t.test (k INT PRIMARY KEY, v TEXT);
 		err, "pq: restart transaction") {
 		t.Fatalf("unexpected error: %s", err)
 	}
-	if err := tx.Rollback(); err != nil {
-		t.Fatal(err)
-	}
 }
 
 // TestUnexpectedStatementInRestartWait ensures that a statement other than
@@ -1092,9 +1085,6 @@ func TestUnexpectedStatementInRestartWait(t *testing.T) {
 	if state != "Aborted" {
 		t.Fatalf("expected state %s, got: %s", "Aborted", state)
 	}
-	if err := tx.Rollback(); err != nil {
-		t.Fatal(err)
-	}
 }
 
 // TestNonRetryableError verifies that a non-retryable error is propagated to the client.
@@ -1513,10 +1503,6 @@ func TestRollbackToSavepointFromUnusualStates(t *testing.T) {
 		t.Fatalf("unexpected error: %s", err)
 	}
 	checkState(tx, ts)
-
-	if err := tx.Rollback(); err != nil {
-		t.Fatal(err)
-	}
 }
 
 // Test that, if we'd otherwise perform an auto-retry but results for the
diff --git a/pkg/testutils/testcluster/testcluster_test.go b/pkg/testutils/testcluster/testcluster_test.go
index 05f884e0cc..1333703cec 100644
--- a/pkg/testutils/testcluster/testcluster_test.go
+++ b/pkg/testutils/testcluster/testcluster_test.go
@@ -54,8 +54,6 @@ func TestManualReplication(t *testing.T) {
 
 	if r := s1.Query(t, `SELECT * FROM test WHERE k = 5`); !r.Next() {
 		t.Fatal("no rows")
-	} else {
-		r.Close()
 	}
 
 	s2.ExecRowsAffected(t, 3, `DELETE FROM test`)
