diff --git a/common/prque/lazyqueue_test.go b/common/prque/lazyqueue_test.go
index be9491e..6830df4 100644
--- a/common/prque/lazyqueue_test.go
+++ b/common/prque/lazyqueue_test.go
@@ -74,15 +74,9 @@ func TestLazyQueue(t *testing.T) {
 		q.Push(&items[i])
 	}
 
-	var (
-		lock   sync.Mutex
-		wg     sync.WaitGroup
-		stopCh = make(chan chan struct{})
-	)
-	defer wg.Wait()
-	wg.Add(1)
+	var lock sync.Mutex
+	stopCh := make(chan chan struct{})
 	go func() {
-		defer wg.Done()
 		for {
 			select {
 			case <-clock.After(testQueueRefresh):
@@ -109,8 +103,6 @@ func TestLazyQueue(t *testing.T) {
 		if rand.Intn(100) == 0 {
 			p := q.PopItem().(*lazyItem)
 			if p.p != maxPri {
-				lock.Unlock()
-				close(stopCh)
 				t.Fatalf("incorrect item (best known priority %d, popped %d)", maxPri, p.p)
 			}
 			q.Push(p)
@@ -120,5 +112,7 @@ func TestLazyQueue(t *testing.T) {
 		clock.WaitForTimers(1)
 	}
 
-	close(stopCh)
+	stop := make(chan struct{})
+	stopCh <- stop
+	<-stop
 }
diff --git a/console/console.go b/console/console.go
index ae9f28d..3818b59 100644
--- a/console/console.go
+++ b/console/console.go
@@ -343,47 +343,50 @@ func (c *Console) Evaluate(statement string) {
 // the configured user prompter.
 func (c *Console) Interactive() {
 	var (
-		prompt      = c.prompt             // the current prompt line (used for multi-line inputs)
-		indents     = 0                    // the current number of input indents (used for multi-line inputs)
-		input       = ""                   // the current user input
-		inputLine   = make(chan string, 1) // receives user input
-		inputErr    = make(chan error, 1)  // receives liner errors
-		requestLine = make(chan string)    // requests a line of input
-		interrupt   = make(chan os.Signal, 1)
+		prompt    = c.prompt // the current prompt line (used for multi-line inputs)
+		indents   = 0        // the current number of input indents (used for multi-line inputs)
+		input     = ""       // the current user input
+		scheduler = make(chan string)
 	)
 
 	// Monitor Ctrl-C. While liner does turn on the relevant terminal mode bits to avoid
 	// the signal, a signal can still be received for unsupported terminals. Unfortunately
 	// there is no way to cancel the line reader when this happens. The readLines
 	// goroutine will be leaked in this case.
-	signal.Notify(interrupt, syscall.SIGINT, syscall.SIGTERM)
-	defer signal.Stop(interrupt)
-
-	// The line reader runs in a separate goroutine.
-	go c.readLines(inputLine, inputErr, requestLine)
-	defer close(requestLine)
+	go func() {
+		for {
+			// Read the next user input
+			line, err := c.prompter.PromptInput(<-scheduler)
+			if err != nil {
+				// In case of an error, either clear the prompt or fail
+				if err == liner.ErrPromptAborted { // ctrl-C
+					prompt, indents, input = c.prompt, 0, ""
+					scheduler <- ""
+					continue
+				}
+				close(scheduler)
+				return
+			}
+			// User input retrieved, send for interpretation and loop
+			scheduler <- line
+		}
+	}()
+	// Monitor Ctrl-C too in case the input is empty and we need to bail
+	abort := make(chan os.Signal, 1)
+	signal.Notify(abort, syscall.SIGINT, syscall.SIGTERM)
 
 	for {
 		// Send the next prompt, triggering an input read.
-		requestLine <- prompt
+		scheduler <- prompt
 
 		select {
-		case <-interrupt:
+		case <-abort:
 			fmt.Fprintln(c.printer, "caught interrupt, exiting")
 			return
 
-		case err := <-inputErr:
-			if err == liner.ErrPromptAborted {
-				// When prompting for multi-line input, the first Ctrl-C resets
-				// the multi-line state.
-				prompt, indents, input = c.prompt, 0, ""
-				continue
-			}
-			return
-
-		case line := <-inputLine:
-			// User input was returned by the prompter, handle special cases.
-			if indents <= 0 && exit.MatchString(line) {
+		case line, ok := <-scheduler:
+			// User input was returned by the prompter, handle special cases
+			if !ok || (indents <= 0 && exit.MatchString(line)) {
 				return
 			}
 			if onlyWhitespace.MatchString(line) {
@@ -414,18 +417,6 @@ func (c *Console) Interactive() {
 	}
 }
 
-// readLines runs in its own goroutine, prompting for input.
-func (c *Console) readLines(input chan<- string, errc chan<- error, prompt <-chan string) {
-	for p := range prompt {
-		line, err := c.prompter.PromptInput(p)
-		if err != nil {
-			errc <- err
-		} else {
-			input <- line
-		}
-	}
-}
-
 // countIndents returns the number of identations for the given input.
 // In case of invalid input such as var a = } the result can be negative.
 func countIndents(input string) int {
diff --git a/event/event_test.go b/event/event_test.go
index bdad11f..280e6f5 100644
--- a/event/event_test.go
+++ b/event/event_test.go
@@ -203,7 +203,6 @@ func BenchmarkPostConcurrent(b *testing.B) {
 // for comparison
 func BenchmarkChanSend(b *testing.B) {
 	c := make(chan interface{})
-	defer close(c)
 	closed := make(chan struct{})
 	go func() {
 		for range c {
diff --git a/miner/worker_test.go b/miner/worker_test.go
index a5c558b..b46bf3e 100644
--- a/miner/worker_test.go
+++ b/miner/worker_test.go
@@ -17,6 +17,7 @@
 package miner
 
 import (
+	"fmt"
 	"math/big"
 	"math/rand"
 	"sync/atomic"
@@ -215,17 +216,34 @@ func testGenerateBlockAndImport(t *testing.T, isClique bool) {
 	chain, _ := core.NewBlockChain(db2, nil, b.chain.Config(), engine, vm.Config{}, nil, nil)
 	defer chain.Stop()
 
+	var (
+		loopErr   = make(chan error)
+		newBlock  = make(chan struct{})
+		subscribe = make(chan struct{})
+	)
+	listenNewBlock := func() {
+		sub := w.mux.Subscribe(core.NewMinedBlockEvent{})
+		defer sub.Unsubscribe()
+
+		subscribe <- struct{}{}
+		for item := range sub.Chan() {
+			block := item.Data.(core.NewMinedBlockEvent).Block
+			_, err := chain.InsertChain([]*types.Block{block})
+			if err != nil {
+				loopErr <- fmt.Errorf("failed to insert new mined block:%d, error:%v", block.NumberU64(), err)
+			}
+			newBlock <- struct{}{}
+		}
+	}
+
 	// Ignore empty commit here for less noise.
 	w.skipSealHook = func(task *task) bool {
 		return len(task.receipts) == 0
 	}
+	go listenNewBlock()
 
-	// Wait for mined blocks.
-	sub := w.mux.Subscribe(core.NewMinedBlockEvent{})
-	defer sub.Unsubscribe()
-
-	// Start mining!
-	w.start()
+	<-subscribe // Ensure the subscription is created
+	w.start()   // Start mining!
 
 	for i := 0; i < 5; i++ {
 		b.txPool.AddLocal(b.newRandomTx(true))
@@ -234,12 +252,10 @@ func testGenerateBlockAndImport(t *testing.T, isClique bool) {
 		w.postSideBlock(core.ChainSideEvent{Block: b.newRandomUncle()})
 
 		select {
-		case ev := <-sub.Chan():
-			block := ev.Data.(core.NewMinedBlockEvent).Block
-			if _, err := chain.InsertChain([]*types.Block{block}); err != nil {
-				t.Fatalf("failed to insert new mined block %d: %v", block.NumberU64(), err)
-			}
-		case <-time.After(3 * time.Second): // Worker needs 1s to include new changes.
+		case e := <-loopErr:
+			t.Fatal(e)
+		case <-newBlock:
+		case <-time.NewTimer(3 * time.Second).C: // Worker needs 1s to include new changes.
 			t.Fatalf("timeout")
 		}
 	}
diff --git a/rpc/client_test.go b/rpc/client_test.go
index 5b1f960..136fed7 100644
--- a/rpc/client_test.go
+++ b/rpc/client_test.go
@@ -477,7 +477,7 @@ func TestClientHTTP(t *testing.T) {
 	// Launch concurrent requests.
 	var (
 		results    = make([]echoResult, 100)
-		errc       = make(chan error, len(results))
+		errc       = make(chan error)
 		wantResult = echoResult{"a", 1, new(echoArgs)}
 	)
 	defer client.Close()
diff --git a/rpc/subscription_test.go b/rpc/subscription_test.go
index 54a053d..3c7a881 100644
--- a/rpc/subscription_test.go
+++ b/rpc/subscription_test.go
@@ -125,13 +125,11 @@ func TestSubscriptions(t *testing.T) {
 
 // This test checks that unsubscribing works.
 func TestServerUnsubscribe(t *testing.T) {
-	p1, p2 := net.Pipe()
-	defer p2.Close()
-
 	// Start the server.
 	server := newTestServer()
-	service := &notificationTestService{unsubscribed: make(chan string, 1)}
+	service := &notificationTestService{unsubscribed: make(chan string)}
 	server.RegisterName("nftest2", service)
+	p1, p2 := net.Pipe()
 	go server.ServeCodec(NewCodec(p1), 0)
 
 	// Subscribe.
@@ -142,7 +140,7 @@ func TestServerUnsubscribe(t *testing.T) {
 	var (
 		resps         = make(chan subConfirmation)
 		notifications = make(chan subscriptionResult)
-		errors        = make(chan error, 1)
+		errors        = make(chan error)
 	)
 	go waitForMessages(json.NewDecoder(p2), resps, notifications, errors)
 
@@ -180,41 +178,32 @@ type subConfirmation struct {
 // It stops if there is an error.
 func waitForMessages(in *json.Decoder, successes chan subConfirmation, notifications chan subscriptionResult, errors chan error) {
 	for {
-		resp, notification, err := readAndValidateMessage(in)
-		if err != nil {
-			errors <- err
+		var msg jsonrpcMessage
+		if err := in.Decode(&msg); err != nil {
+			errors <- fmt.Errorf("decode error: %v", err)
 			return
-		} else if resp != nil {
-			successes <- *resp
-		} else {
-			notifications <- *notification
 		}
-	}
-}
-
-func readAndValidateMessage(in *json.Decoder) (*subConfirmation, *subscriptionResult, error) {
-	var msg jsonrpcMessage
-	if err := in.Decode(&msg); err != nil {
-		return nil, nil, fmt.Errorf("decode error: %v", err)
-	}
-	switch {
-	case msg.isNotification():
-		var res subscriptionResult
-		if err := json.Unmarshal(msg.Params, &res); err != nil {
-			return nil, nil, fmt.Errorf("invalid subscription result: %v", err)
-		}
-		return nil, &res, nil
-	case msg.isResponse():
-		var c subConfirmation
-		if msg.Error != nil {
-			return nil, nil, msg.Error
-		} else if err := json.Unmarshal(msg.Result, &c.subid); err != nil {
-			return nil, nil, fmt.Errorf("invalid response: %v", err)
-		} else {
-			json.Unmarshal(msg.ID, &c.reqid)
-			return &c, nil, nil
+		switch {
+		case msg.isNotification():
+			var res subscriptionResult
+			if err := json.Unmarshal(msg.Params, &res); err != nil {
+				errors <- fmt.Errorf("invalid subscription result: %v", err)
+			} else {
+				notifications <- res
+			}
+		case msg.isResponse():
+			var c subConfirmation
+			if msg.Error != nil {
+				errors <- msg.Error
+			} else if err := json.Unmarshal(msg.Result, &c.subid); err != nil {
+				errors <- fmt.Errorf("invalid response: %v", err)
+			} else {
+				json.Unmarshal(msg.ID, &c.reqid)
+				successes <- c
+			}
+		default:
+			errors <- fmt.Errorf("unrecognized message: %v", msg)
+			return
 		}
-	default:
-		return nil, nil, fmt.Errorf("unrecognized message: %v", msg)
 	}
 }
