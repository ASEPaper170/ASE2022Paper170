// +build ignore

package main

import (
	"fmt"
	"log"
	"os"
	"os/exec"
	"regexp"
	"strings"
)

func main() {
	mapName := os.Args[1]
	keyType := os.Args[2]
	valueType := os.Args[3]
	templateSrc := "map-wrapper-template.go"
	if len(os.Args) > 4 && os.Args[4] == "finite" {
		templateSrc = "map-finite-wrapper-template.go"
	}

	startfilename := strings.TrimSuffix(os.Getenv("GOFILE"), ".go")

	templateB, err := os.ReadFile(templateSrc)
	if err != nil {
		log.Fatal(err)
	}

	template := string(templateB)

	// Discard the first two lines
	template = strings.SplitN(template, "\n", 3)[2]

	for _, repl := range []struct{ src, dest string }{
		{`WrappedMapElement`, mapName},
		{`KEYTYPE`, keyType},
		{`VALUETYPE`, valueType},
	} {
		re := regexp.MustCompile(repl.src)
		template = re.ReplaceAllString(template, repl.dest)

	}

	template = fmt.Sprintf("// Code generated by generate-map.go for %s. DO NOT EDIT.\n\n%s", mapName, template)

	finalName := startfilename + "_gen.go"
	os.WriteFile(finalName, []byte(template), 0666)

	err = exec.Command("goimports", "-w", finalName).Run()
	if err != nil {
		log.Fatal(err)
	}

	fmt.Println("Successfully generated", finalName)
}
