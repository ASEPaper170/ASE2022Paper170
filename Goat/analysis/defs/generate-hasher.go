// +build ignore

package main

import (
	"fmt"
	"log"
	"os"
	"os/exec"
	"regexp"
	"strings"
)

func main() {
	hashee := os.Args[1]
	pretty := os.Args[2]
	// If the hashed data type is meant to be used as an interface, use that,
	// instead, i. e. as an argument type for functions.
	var interf string
	if len(os.Args) > 3 {
		interf = os.Args[3]
	} else {
		interf = hashee
	}

	startfilename := strings.TrimSuffix(os.Getenv("GOFILE"), ".go")

	templateB, err := os.ReadFile("hasher-template.go")
	if err != nil {
		log.Fatal(err)
	}

	template := string(templateB)

	// Discard the first two lines
	template = strings.SplitN(template, "\n", 3)[2]

	for _, repl := range []struct{ src, dest string }{
		{`hasherTemplate`, "hasher" + hashee},
		{`Hashee`, hashee},
		{`Prettyhashee`, pretty},
		{`HInterface`, interf},
	} {
		re := regexp.MustCompile(repl.src)
		template = re.ReplaceAllString(template, repl.dest)
	}

	template = "// Code generated by generate-hasher.go for " + hashee + ". DO NOT EDIT\n\n" +
		template

	finalName := startfilename + "_gen.go"
	os.WriteFile(finalName, []byte(template), 0666)

	err = exec.Command("goimports", "-w", finalName).Run()
	if err != nil {
		log.Fatal(err)
	}

	fmt.Println("Successfully generated", finalName)
}
